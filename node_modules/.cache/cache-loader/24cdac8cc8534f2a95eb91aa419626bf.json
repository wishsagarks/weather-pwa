{"remainingRequest":"E:\\weather-pwa\\node_modules\\babel-loader\\lib\\index.js!E:\\weather-pwa\\src\\services\\WeatherForecast.js","dependencies":[{"path":"E:\\weather-pwa\\src\\services\\WeatherForecast.js","mtime":1678328524558},{"path":"E:\\weather-pwa\\package.json","mtime":1678328524558},{"path":"E:\\weather-pwa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678329659814},{"path":"E:\\weather-pwa\\node_modules\\babel-loader\\lib\\index.js","mtime":1678329660121}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\weather-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"E:\\\\weather-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\";\nimport _createClass from \"E:\\\\weather-pwa\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\";\n\n/*\r\n* Service that fetch and parse weather forecast from openweathermap.org.\r\n*\r\n* @author Jim Merioles <jimwisleymerioles@gmail.com>\r\n*/\nvar WeatherForecast =\n/*#__PURE__*/\nfunction () {\n  /*\r\n  * Create WeatherForecast instance.\r\n  */\n  function WeatherForecast() {\n    _classCallCheck(this, WeatherForecast);\n\n    this.cloudiness = 0;\n    this.windSpeed = 0;\n    this.humidity = 0;\n    this.temperatureValue = 0;\n    this.temperatureHigh = 0;\n    this.temperatureLow = 0;\n    this.location = ' ';\n    this.description = 'Please connect to internet to fetch latest forecast :)';\n    this.weatherIcon = require('../assets/icons/weather/cloud.svg');\n    this.update();\n  }\n  /*\r\n  * Update forecast with fresh data from current location.\r\n  */\n\n\n  _createClass(WeatherForecast, [{\n    key: \"update\",\n    value: function update() {\n      var _this = this;\n\n      if (navigator.onLine) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n          return _this.updateForecast(position);\n        });\n      }\n    }\n    /*\r\n    * Update forecast from given coordinates data.\r\n    *\r\n    * @param {Object} position - Lat & lon coordinates object.\r\n    */\n\n  }, {\n    key: \"updateForecast\",\n    value: function () {\n      var _updateForecast = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(position) {\n        var data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = null;\n                _context.prev = 1;\n                _context.next = 4;\n                return this.getForecast(position.coords);\n\n              case 4:\n                data = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                data = this.getErrorData();\n\n              case 10:\n                this.populate(data);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n\n      return function updateForecast(_x) {\n        return _updateForecast.apply(this, arguments);\n      };\n    }()\n    /*\r\n    * Fetch weather forecast from endpoint(openweathermap.org).\r\n    *\r\n    * @param {Object} coordinates - Lat & lon coordinates object.\r\n    */\n\n  }, {\n    key: \"getForecast\",\n    value: function () {\n      var _getForecast = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(coordinates) {\n        var appId, endpoint, response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                appId = 'a3e7bdc246b811691b06aab13ccb0dbb';\n                endpoint = \"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(coordinates.latitude, \"&lon=\").concat(coordinates.longitude, \"&appid=\").concat(appId, \"&units=metric\");\n                _context2.next = 4;\n                return fetch(endpoint);\n\n              case 4:\n                response = _context2.sent;\n                _context2.next = 7;\n                return response.json();\n\n              case 7:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function getForecast(_x2) {\n        return _getForecast.apply(this, arguments);\n      };\n    }()\n    /*\r\n    * Error data for end-users.\r\n    */\n\n  }, {\n    key: \"getErrorData\",\n    value: function getErrorData() {\n      return {\n        clouds: {\n          all: 0\n        },\n        wind: {\n          speed: 0\n        },\n        main: {\n          humidity: 0,\n          temp: 0,\n          temp_max: 0,\n          temp_min: 0\n        },\n        weather: [{\n          id: 0,\n          description: \"There's a problem at the weather forecast server \\xAF\\\\_(\\u30C4)_/\\xAF\"\n        }],\n        name: null,\n        sys: {\n          country: null\n        }\n      };\n    }\n    /*\r\n    * Set new data.\r\n    *\r\n    * @param {Object} data - Weather forecast json data.\r\n    */\n\n  }, {\n    key: \"populate\",\n    value: function populate(data) {\n      this.cloudiness = data.clouds.all;\n      this.windSpeed = data.wind.speed;\n      this.humidity = data.main.humidity;\n      this.temperatureValue = Math.round(data.main.temp);\n      this.temperatureHigh = Math.round(data.main.temp_max);\n      this.temperatureLow = Math.round(data.main.temp_min);\n      this.location = this.formatLocation(data.name, data.sys.country);\n      this.description = data.weather[0].description;\n      this.weatherIcon = this.getWeatherIcon(data.weather[0].id);\n    }\n    /*\r\n    * Format location.\r\n    *\r\n    * @param {String} city - Current city.\r\n    * @param {String} country - Current country.\r\n    */\n\n  }, {\n    key: \"formatLocation\",\n    value: function formatLocation(city, country) {\n      if (city === null && country === null) {\n        return '';\n      }\n\n      return \"\".concat(city, \", \").concat(country);\n    }\n    /*\r\n    * Get weather icon based on id.\r\n    *\r\n    * @param {Number} id - Weather ID.\r\n    */\n\n  }, {\n    key: \"getWeatherIcon\",\n    value: function getWeatherIcon(id) {\n      if (this.isThunderstorm(id)) {\n        return require('../assets/icons/weather/thunderstorm.svg');\n      }\n\n      if (this.isDrizzle(id) || this.isRain(id)) {\n        return require('../assets/icons/weather/rain.svg');\n      }\n\n      if (this.isSnow(id)) {\n        return require('../assets/icons/weather/snow.svg');\n      }\n\n      return require('../assets/icons/weather/cloud.svg');\n    }\n    /*\r\n    * Check if under Thunderstorm category.\r\n    *\r\n    * @param {Number} id - Weather ID.\r\n    */\n\n  }, {\n    key: \"isThunderstorm\",\n    value: function isThunderstorm(id) {\n      return id > 199 && id < 233;\n    }\n    /*\r\n    * Check if under Drizzle category.\r\n    *\r\n    * @param {Number} id - Weather ID.\r\n    */\n\n  }, {\n    key: \"isDrizzle\",\n    value: function isDrizzle(id) {\n      return id > 299 && id < 322;\n    }\n    /*\r\n    * Check if under Rain category.\r\n    *\r\n    * @param {Number} id - Weather ID.\r\n    */\n\n  }, {\n    key: \"isRain\",\n    value: function isRain(id) {\n      return id > 499 && id < 532;\n    }\n    /*\r\n    * Check if under Snow category.\r\n    *\r\n    * @param {Number} id - Weather ID.\r\n    */\n\n  }, {\n    key: \"isSnow\",\n    value: function isSnow(id) {\n      return id > 599 && id < 623;\n    }\n  }]);\n\n  return WeatherForecast;\n}();\n\nexport default WeatherForecast;",{"version":3,"sources":["src\\services\\WeatherForecast.js"],"names":["WeatherForecast","cloudiness","windSpeed","humidity","temperatureValue","temperatureHigh","temperatureLow","location","description","weatherIcon","require","update","navigator","onLine","geolocation","getCurrentPosition","updateForecast","position","data","getForecast","coords","getErrorData","populate","coordinates","appId","endpoint","latitude","longitude","fetch","response","json","clouds","all","wind","speed","main","temp","temp_max","temp_min","weather","id","name","sys","country","Math","round","formatLocation","getWeatherIcon","city","isThunderstorm","isDrizzle","isRain","isSnow"],"mappings":"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","file":"E:\\weather-pwa\\src\\services\\WeatherForecast.js","sourceRoot":"E:\\weather-pwa","sourcesContent":["/*\r\n* Service that fetch and parse weather forecast from openweathermap.org.\r\n*\r\n* @author Jim Merioles <jimwisleymerioles@gmail.com>\r\n*/\r\nclass WeatherForecast {\r\n    /*\r\n    * Create WeatherForecast instance.\r\n    */\r\n    constructor() {\r\n        this.cloudiness = 0;\r\n        this.windSpeed = 0;\r\n        this.humidity = 0;\r\n\r\n        this.temperatureValue = 0;\r\n        this.temperatureHigh = 0;\r\n        this.temperatureLow = 0;\r\n\r\n        this.location = ' ';\r\n        this.description = 'Please connect to internet to fetch latest forecast :)';\r\n        this.weatherIcon = require('../assets/icons/weather/cloud.svg');\r\n\r\n        this.update();\r\n    }\r\n\r\n    /*\r\n    * Update forecast with fresh data from current location.\r\n    */\r\n    update() {\r\n        if (navigator.onLine) {\r\n            navigator.geolocation.getCurrentPosition(position => this.updateForecast(position));\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Update forecast from given coordinates data.\r\n    *\r\n    * @param {Object} position - Lat & lon coordinates object.\r\n    */\r\n    async updateForecast(position) {\r\n        let data = null;\r\n\r\n        try {\r\n            data = await this.getForecast(position.coords);\r\n        } catch (e) {\r\n            data = this.getErrorData();\r\n        }\r\n\r\n        this.populate(data);\r\n    }\r\n\r\n    /*\r\n    * Fetch weather forecast from endpoint(openweathermap.org).\r\n    *\r\n    * @param {Object} coordinates - Lat & lon coordinates object.\r\n    */\r\n    async getForecast(coordinates) {\r\n        let appId = 'a3e7bdc246b811691b06aab13ccb0dbb';\r\n        let endpoint = `https://api.openweathermap.org/data/2.5/weather?lat=${coordinates.latitude}&lon=${coordinates.longitude}&appid=${appId}&units=metric`;\r\n\r\n        let response = await fetch(endpoint);\r\n\r\n        return await response.json();\r\n    }\r\n\r\n    /*\r\n    * Error data for end-users.\r\n    */\r\n    getErrorData() {\r\n        return {\r\n                clouds: { all: 0 },\r\n                wind: { speed: 0 },\r\n                main: {\r\n                    humidity: 0,\r\n                    temp: 0,\r\n                    temp_max: 0,\r\n                    temp_min: 0,\r\n                },\r\n                weather: [\r\n                    {\r\n                        id: 0,\r\n                        description: `There's a problem at the weather forecast server ¯\\\\_(ツ)_/¯`\r\n                    }\r\n                ],\r\n                name: null,\r\n                sys: {\r\n                    country: null\r\n                }\r\n            };\r\n    }\r\n\r\n    /*\r\n    * Set new data.\r\n    *\r\n    * @param {Object} data - Weather forecast json data.\r\n    */\r\n    populate(data) {\r\n        this.cloudiness = data.clouds.all;\r\n        this.windSpeed = data.wind.speed;\r\n        this.humidity = data.main.humidity;\r\n        this.temperatureValue = Math.round(data.main.temp);\r\n        this.temperatureHigh = Math.round(data.main.temp_max);\r\n        this.temperatureLow = Math.round(data.main.temp_min);\r\n        this.location = this.formatLocation(data.name, data.sys.country);\r\n        this.description = data.weather[0].description;\r\n        this.weatherIcon = this.getWeatherIcon(data.weather[0].id);\r\n    }\r\n\r\n    /*\r\n    * Format location.\r\n    *\r\n    * @param {String} city - Current city.\r\n    * @param {String} country - Current country.\r\n    */\r\n    formatLocation(city, country) {\r\n        if (city === null && country === null) {\r\n            return '';\r\n        }\r\n\r\n        return `${city}, ${country}`;\r\n    }\r\n\r\n    /*\r\n    * Get weather icon based on id.\r\n    *\r\n    * @param {Number} id - Weather ID.\r\n    */\r\n    getWeatherIcon(id) {\r\n        if(this.isThunderstorm(id)) {\r\n            return require('../assets/icons/weather/thunderstorm.svg');\r\n        }\r\n\r\n        if(this.isDrizzle(id) || this.isRain(id)) {\r\n            return require('../assets/icons/weather/rain.svg');\r\n        }\r\n\r\n        if(this.isSnow(id)) {\r\n            return require('../assets/icons/weather/snow.svg');\r\n        }\r\n\r\n        return require('../assets/icons/weather/cloud.svg');\r\n    }\r\n\r\n    /*\r\n    * Check if under Thunderstorm category.\r\n    *\r\n    * @param {Number} id - Weather ID.\r\n    */\r\n    isThunderstorm(id) {\r\n        return id > 199 && id < 233;\r\n    }\r\n\r\n    /*\r\n    * Check if under Drizzle category.\r\n    *\r\n    * @param {Number} id - Weather ID.\r\n    */\r\n    isDrizzle(id) {\r\n        return id >299 && id < 322;\r\n    }\r\n\r\n    /*\r\n    * Check if under Rain category.\r\n    *\r\n    * @param {Number} id - Weather ID.\r\n    */\r\n    isRain(id) {\r\n        return id > 499 && id < 532;\r\n    }\r\n\r\n    /*\r\n    * Check if under Snow category.\r\n    *\r\n    * @param {Number} id - Weather ID.\r\n    */\r\n    isSnow(id) {\r\n        return id > 599 && id < 623;\r\n    }\r\n}\r\n\r\nexport default WeatherForecast;\r\n"]}]}