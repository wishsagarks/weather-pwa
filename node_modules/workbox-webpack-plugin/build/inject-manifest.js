'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
  Copyright 2017 Google Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

var assert = require('assert');
var path = require('path');

var _require = require('workbox-build'),
    getManifest = _require.getManifest;

var convertStringToAsset = require('./lib/convert-string-to-asset');
var getAssetHash = require('./lib/get-asset-hash');
var getManifestEntriesFromCompilation = require('./lib/get-manifest-entries-from-compilation');
var getWorkboxSWImports = require('./lib/get-workbox-sw-imports');
var readFileWrapper = require('./lib/read-file-wrapper');
var sanitizeConfig = require('./lib/sanitize-config');
var stringifyManifest = require('./lib/stringify-manifest');

/**
 * This class supports taking an existing service worker file which already
 * uses Workbox, and injecting a reference to a [precache manifest]() into it,
 * allowing it to efficiently precache the assets created by a webpack build.
 *
 * Use an instance of `InjectManifest` in the
 * [`plugins` array](https://webpack.js.org/concepts/plugins/#usage) of a
 * webpack config.
 *
 * @module workbox-webpack-plugin
 */

var InjectManifest = function () {
  /**
   * Creates an instance of InjectManifest.
   *
   * @param {Object} [config] See the
   * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin#configuration)
   * for all supported options and defaults.
   */
  function InjectManifest() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, InjectManifest);

    assert(typeof config.swSrc === 'string', `swSrc must be set to the path ` + `to an existing service worker file.`);

    this.config = (0, _assign2.default)({}, {
      chunks: [],
      exclude: [
      // Exclude source maps.
      /\.map$/,
      // Exclude anything starting with manifest and ending .js or .json.
      /^manifest.*\.js(?:on)?$/],
      excludeChunks: [],
      importScripts: [],
      importWorkboxFrom: 'cdn',
      swDest: path.basename(config.swSrc)
    }, config);
  }

  /**
   * @param {Object} compilation The webpack compilation.
   * @param {Function} readFile The function to use when reading files,
   * derived from compiler.inputFileSystem.
   * @private
   */


  (0, _createClass3.default)(InjectManifest, [{
    key: 'handleEmit',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(compilation, readFile) {
        var workboxSWImports, entries, sanitizedConfig, _ref2, manifestEntries, manifestString, manifestAsset, manifestHash, manifestFilename, originalSWString, importScriptsString, postInjectionSWString;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.config.importWorkboxFrom === 'local')) {
                  _context.next = 2;
                  break;
                }

                throw new Error(`importWorkboxFrom can not be set to 'local' when using` + ` InjectManifest. Please use 'cdn' or a chunk name instead.`);

              case 2:
                _context.next = 4;
                return getWorkboxSWImports(compilation, this.config);

              case 4:
                workboxSWImports = _context.sent;
                entries = getManifestEntriesFromCompilation(compilation, this.config);
                sanitizedConfig = sanitizeConfig.forGetManifest(this.config);
                // If there are any "extra" config options remaining after we remove the
                // ones that are used natively by the plugin, then assume that they should
                // be passed on to workbox-build.getManifest() to generate extra entries.

                if (!((0, _keys2.default)(sanitizedConfig).length > 0)) {
                  _context.next = 14;
                  break;
                }

                // If globPatterns isn't explicitly set, then default to [], instead of
                // the workbox-build.getManifest() default.
                sanitizedConfig.globPatterns = sanitizedConfig.globPatterns || [];
                _context.next = 11;
                return getManifest(sanitizedConfig);

              case 11:
                _ref2 = _context.sent;
                manifestEntries = _ref2.manifestEntries;

                entries = entries.concat(manifestEntries);

              case 14:
                manifestString = stringifyManifest(entries);
                manifestAsset = convertStringToAsset(manifestString);
                manifestHash = getAssetHash(manifestAsset);
                manifestFilename = `precache-manifest.${manifestHash}.js`;

                compilation.assets[manifestFilename] = manifestAsset;
                this.config.importScripts.push((compilation.options.output.publicPath || '') + manifestFilename);

                // workboxSWImports might be null if importWorkboxFrom is 'disabled'.
                if (workboxSWImports) {
                  // workboxSWImport is an array, so use concat() rather than push().
                  this.config.importScripts = this.config.importScripts.concat(workboxSWImports);
                }

                _context.next = 23;
                return readFileWrapper(readFile, this.config.swSrc);

              case 23:
                originalSWString = _context.sent;
                importScriptsString = this.config.importScripts.map(_stringify2.default).join(', ');
                postInjectionSWString = `importScripts(${importScriptsString});

${originalSWString}
`;


                compilation.assets[this.config.swDest] = convertStringToAsset(postInjectionSWString);

              case 27:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function handleEmit(_x2, _x3) {
        return _ref.apply(this, arguments);
      }

      return handleEmit;
    }()

    /**
     * @param {Object} [compiler] default compiler object passed from webpack
     *
     * @private
     */

  }, {
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      compiler.plugin('emit', function (compilation, callback) {
        _this.handleEmit(compilation, compiler.inputFileSystem._readFile).then(callback).catch(callback);
      });
    }
  }]);
  return InjectManifest;
}();

module.exports = InjectManifest;